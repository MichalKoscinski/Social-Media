{"version":3,"sources":["logo.svg","lookup/components.js","posts/components.js","posts/lookup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","console","log","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","send","PostsComponent","props","textAreaRef","React","createRef","useState","newPosts","setNewPosts","handleBackendUpdate","tempNewPosts","unshift","alert","className","onSubmit","event","preventDefault","newVal","current","value","content","ref","required","type","PostsList","postsInit","setPostsInit","posts","setPosts","postsDidSet","setPostsDidSet","useEffect","final","concat","map","item","index","Post","post","key","ActionBtn","action","didPerformAction","likes","actionDisplay","display","handleActionBackendEvent","onClick","postId","id","apiPostAction","ParentPost","parent","actionPost","setActionPost","handlePerformAction","newActionPost","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0638fd8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data){\r\n    jsonData = JSON.stringify(data)\r\n    console.log(\"test\")\r\n    console.log(data)\r\n    console.log(\"jsonData\" + jsonData)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `https://social-media-michal.herokuapp.com/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n  if (csrftoken){\r\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n  \r\n  xhr.onload = function() {\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    console.log(e)\r\n    callback({\"message\": \"The request was an error\"}, 400)\r\n  }\r\n  xhr.send(jsonData)\r\n}","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {\r\n  apiPostAction,\r\n  apiPostCreate, \r\n  apiPostList} from './lookup'\r\n\r\nexport function PostsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newPosts, setNewPosts] = useState([])\r\n    \r\n    const handleBackendUpdate = (response, status) =>{\r\n      // backend api response handler\r\n      let tempNewPosts = [...newPosts]\r\n      if (status === 201){\r\n        tempNewPosts.unshift(response)\r\n        setNewPosts(tempNewPosts)\r\n      } else {\r\n        console.log(response)\r\n        alert(\"An error occured please try again\")\r\n      }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      // backend api request\r\n      apiPostCreate(newVal, handleBackendUpdate)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n            <div className='col-12 mb-3'>\r\n              <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} required={true} className='form-control' name='post'>\r\n\r\n                </textarea>\r\n                <button type='submit' className='btn btn-primary my-3'>Post</button>\r\n            </form>\r\n            </div>\r\n        <PostsList newPosts={newPosts} />\r\n    </div>\r\n}\r\n\r\nexport function PostsList(props) {\r\n    const [postsInit, setPostsInit] = useState([])\r\n    const [posts, setPosts] = useState([])\r\n    const [postsDidSet, setPostsDidSet] = useState(false)\r\n    useEffect(()=>{\r\n      const final = [...props.newPosts].concat(postsInit)\r\n      if (final.length !== posts.length) {\r\n        setPosts(final)\r\n      }\r\n    }, [props.newPosts, posts, postsInit])\r\n\r\n    useEffect(() => {\r\n      if (postsDidSet === false){\r\n        const handlePostListLookup = (response, status) => {\r\n          if (status === 200){\r\n            setPostsInit(response)\r\n            setPostsDidSet(true)\r\n          } else {\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        apiPostList(handlePostListLookup)\r\n      }\r\n    }, [postsInit, postsDidSet, setPostsDidSet])\r\n    return posts.map((item, index)=>{\r\n      return <Post post={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\r\n    })\r\n  }\r\n\r\n\r\nexport function ActionBtn(props) {\r\n    const {post, action, didPerformAction} = props\r\n    const likes = post.likes ? post.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    \r\n    const handleActionBackendEvent = (response, status) =>{\r\n      console.log(response, status)\r\n      if ((status === 200 || status === 201) && didPerformAction){\r\n        didPerformAction(response, status)\r\n      }\r\n    }\r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      apiPostAction(post.id, action.type, handleActionBackendEvent)\r\n        \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n  \r\nexport function ParentPost(props){\r\n  const {post} = props\r\n  return post.parent ? <div className='row'>\r\n  <div className='col-11 mx-auto p-3 border rounded'>\r\n    <p className='mb-0 text-muted small'>Repost</p>\r\n    <Post className={' '} post={post.parent} />\r\n  </div>\r\n  </div> : null\r\n}\r\nexport function Post(props) {\r\n    const {post} = props\r\n    const [actionPost, setActionPost] = useState(props.post ? props.post : null)\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    \r\n    const handlePerformAction = (newActionPost, status) => {\r\n      if (status === 200){\r\n        setActionPost(newActionPost)\r\n      } else if (status === 201) {\r\n        // let the post list know.\r\n      }\r\n      \r\n    }\r\n    \r\n    return <div className={className}>\r\n            <div>\r\n              <p>{post.id} - {post.content}</p>\r\n              <ParentPost post={post} />\r\n            </div>\r\n        {actionPost && <div className='btn btn-group'>\r\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\r\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type: \"repost\", display:\"Repost\"}}/>\r\n              </div>\r\n      }\r\n    </div>\r\n  }","import {backendLookup} from '../lookup'\r\n\r\nexport function apiPostCreate(newPost, callback){\r\n    backendLookup(\"POST\", \"/posts/create/\", callback, {content: newPost})\r\n  }\r\n\r\nexport function apiPostAction(postId, action, callback){\r\n    const data = {id: postId, action: action}\r\n    backendLookup(\"POST\", \"/posts/action/\", callback, data)\r\n}\r\n  \r\nexport function apiPostList(callback) {\r\n    backendLookup(\"GET\", \"/posts/\", callback)\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {PostsComponent} from './posts'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <PostsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {PostsComponent} from './posts'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst tweetsEl = document.getElementById(\"social-media\")\nif (tweetsEl) {\n    ReactDOM.render(<PostsComponent />, tweetsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}