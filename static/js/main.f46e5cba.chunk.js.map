{"version":3,"sources":["lookup/components.js","posts/buttons.js","posts/lookup.js","posts/create.js","posts/detail.js","posts/list.js","posts/components.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","send","ActionBtn","props","post","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","console","log","type","onClick","event","preventDefault","postId","id","apiPostAction","PostCreate","textAreaRef","React","createRef","didPost","handleBackendUpdate","alert","onSubmit","newVal","current","value","content","ref","required","ParentPost","parent","Post","hideActions","didRepost","useState","actionPost","setActionPost","match","pathname","urlPostId","groups","postid","isDetail","handlePerformAction","newActionPost","Fragment","PostsList","postsInit","setPostsInit","posts","setPosts","postsDidSet","setPostsDidSet","useEffect","final","newPosts","concat","username","apiPostList","handleDidRepost","newPost","updatePostsInit","unshift","updateFinalPosts","map","item","index","key","PostsComponent","setNewPosts","canPost","tempNewPosts","PostDetailComponent","didLookup","setDidLookup","setPost","handleBackendLookup","apiPostDetail","Boolean","hostname","postsEl","getElementById","ReactDOM","render","querySelectorAll","forEach","container","createElement","dataset","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f46e5cba.chunk.js","sourcesContent":["function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/api${endpoint}` //change\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n  if (csrftoken){\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n  \r\n  xhr.onload = function() {\r\n    if (xhr.status === 403) {\r\n      const detail = xhr.response.detail\r\n      if (detail === \"Authentication credentials were not provided.\"){\r\n        window.location.href = \"/login?showLoginRequired=true\"\r\n      }\r\n    }\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    callback({\"message\": \"The request was an error\"}, 400)\r\n  }\r\n  xhr.send(jsonData)\r\n}","import React from 'react'\r\n\r\nimport {apiPostAction} from './lookup'\r\n\r\nexport function ActionBtn(props) {\r\n    const {post, action, didPerformAction} = props\r\n    const likes = post.likes ? post.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    \r\n    const handleActionBackendEvent = (response, status) =>{\r\n      console.log(response, status)\r\n      if ((status === 200 || status === 201) && didPerformAction){\r\n        didPerformAction(response, status)\r\n      }\r\n    }\r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      apiPostAction(post.id, action.type, handleActionBackendEvent)\r\n        \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }","import {backendLookup} from '../lookup'\r\n\r\nexport function apiPostCreate(newPost, callback){\r\n    backendLookup(\"POST\", \"/posts/create/\", callback, {content: newPost})\r\n  }\r\n\r\nexport function apiPostAction(postId, action, callback){\r\n    const data = {id: postId, action: action}\r\n    backendLookup(\"POST\", \"/posts/action/\", callback, data)\r\n}\r\n\r\nexport function apiPostDetail(postId, callback) {\r\n    backendLookup(\"GET\", `/posts/${postId}/`, callback)\r\n}\r\n\r\n\r\nexport function apiPostList(username, callback) {\r\n    let endpoint =  \"/posts/\"\r\n    if (username){\r\n        endpoint =  `/posts/?username=${username}`\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n}","import React from 'react'\r\nimport {apiPostCreate} from './lookup'\r\n\r\n\r\nexport function PostCreate(props){\r\n  const textAreaRef = React.createRef()\r\n  const {didPost} = props\r\n    const handleBackendUpdate = (response, status) =>{\r\n      if (status === 201){\r\n        didPost(response)\r\n      } else {\r\n        console.log(response)\r\n        alert(\"An error occured please try again\")\r\n      }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      apiPostCreate(newVal, handleBackendUpdate)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n          <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='post'>\r\n\r\n            </textarea>\r\n            <button type='submit' className='btn btn-primary my-3'>Post</button>\r\n        </form>\r\n  </div>\r\n}","import React, {useState}  from 'react'\r\n\r\nimport {ActionBtn} from './buttons'\r\n\r\nexport function ParentPost(props){\r\n    const {post} = props\r\n    return post.parent ? <div className='row'>\r\n    <div className='col-11 mx-auto p-3 border rounded'>\r\n      <p className='mb-0 text-muted small'>Repost</p>\r\n      <Post hideActions className={' '} post={post.parent} />\r\n    </div>\r\n    </div> : null\r\n  }\r\n  export function Post(props) {\r\n      const {post, didRepost, hideActions} = props\r\n      const [actionPost, setActionPost] = useState(props.post ? props.post : null)\r\n      const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n      const path = window.location.pathname\r\n      const match = path.match(/(?<postid>\\d+)/)\r\n      const urlPostId = match ? match.groups.postid : -1\r\n      const isDetail = `${post.id}` === `${urlPostId}`\r\n      \r\n      const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${post.id}`\r\n      }\r\n      const handlePerformAction = (newActionPost, status) => {\r\n        if (status === 200){\r\n          setActionPost(newActionPost)\r\n        } else if (status === 201) {\r\n          if (didRepost){\r\n            didRepost(newActionPost)\r\n          }\r\n        }\r\n        \r\n      }\r\n      \r\n      return <div className={className}>\r\n              <div>\r\n                <p>Post {post.id}:</p>\r\n                <p>{post.content}</p>\r\n                <ParentPost post={post} />\r\n              </div>\r\n          <div className='btn btn-group'>\r\n          {(actionPost && hideActions !== true) && <React.Fragment>\r\n                  <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\r\n                  <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n                  <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{type: \"repost\", display:\"Repost\"}}/>\r\n                </React.Fragment>\r\n          }\r\n                  {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n                </div>\r\n       \r\n      </div>\r\n    }\r\n  \r\n    ","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {apiPostList} from './lookup'\r\n\r\nimport {Post} from './detail'\r\n\r\nexport function PostsList(props) {\r\n    const [postsInit, setPostsInit] = useState([])\r\n    const [posts, setPosts] = useState([])\r\n    const [postsDidSet, setPostsDidSet] = useState(false)\r\n    useEffect(()=>{\r\n      const final = [...props.newPosts].concat(postsInit)\r\n      if (final.length !== posts.length) {\r\n        setPosts(final)\r\n      }\r\n    }, [props.newPosts, posts, postsInit])\r\n\r\n    useEffect(() => {\r\n      if (postsDidSet === false){\r\n        const handlePostListLookup = (response, status) => {\r\n          if (status === 200){\r\n            setPostsInit(response)\r\n            setPostsDidSet(true)\r\n          } else {\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        apiPostList(props.username, handlePostListLookup)\r\n      }\r\n    }, [postsInit, postsDidSet, setPostsDidSet, props.username])\r\n\r\n\r\n    const handleDidRepost = (newPost) => {\r\n      const updatePostsInit = [...postsInit]\r\n      updatePostsInit.unshift(newPost)\r\n      setPostsInit(updatePostsInit)\r\n      const updateFinalPosts = [...posts]\r\n      updateFinalPosts.unshift(posts)\r\n      setPosts(updateFinalPosts)\r\n    }\r\n    return posts.map((item, index)=>{\r\n      return <Post  \r\n        post={item} \r\n        didRepost={handleDidRepost}\r\n        className='my-5 py-5 border bg-white text-dark' \r\n        key={`${index}-{item.id}`} />\r\n    })\r\n  }","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {PostCreate} from './create'\r\nimport {Post} from './detail'\r\nimport {apiPostDetail} from './lookup'\r\nimport {PostsList} from './list'\r\n\r\n\r\nexport function PostsComponent(props) {\r\n    const [newPosts, setNewPosts] = useState([])\r\n    const canPost = props.canPost === \"false\" ? false : true\r\n    const handleNewPost = (newPost) =>{\r\n      let tempNewPosts = [...newPosts]\r\n      tempNewPosts.unshift(newPost)\r\n      setNewPosts(tempNewPosts)\r\n    }\r\n    return <div className={props.className}>\r\n            {canPost === true && <PostCreate didPost={handleNewPost} className='col-12 mb-3' />}\r\n          <PostsList newPosts={newPosts} {...props} />\r\n    </div>\r\n}\r\n\r\n\r\nexport function PostDetailComponent(props){\r\n  const {postId} = props\r\n  const [didLookup, setDidLookup] = useState(false)\r\n  const [post, setPost] = useState(null)\r\n\r\n  const handleBackendLookup = (response, status) => {\r\n    if (status === 200) {\r\n      setPost(response)\r\n    } else {\r\n      alert(\"There was an error finding your post.\")\r\n    }\r\n  }\r\n  useEffect(()=>{\r\n    if (didLookup === false){\r\n\r\n      apiPostDetail(postId, handleBackendLookup)\r\n      setDidLookup(true)\r\n    }\r\n  }, [postId, didLookup, setDidLookup])\r\n\r\n  return post === null ? null : <Post post={post} className={props.className} />\r\n }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {PostDetailComponent} from './posts'\r\nimport {PostsComponent} from './posts'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst postsEl = document.getElementById(\"social-media\")\r\nif (postsEl) {\r\n    ReactDOM.render(<PostsComponent />, postsEl);\r\n}\r\n\r\nconst postDetailElements = document.querySelectorAll(\".social-media-detail\")\r\n\r\npostDetailElements.forEach(container=> {\r\n    ReactDOM.render(\r\n        React.createElement(PostDetailComponent, container.dataset), \r\n        container);\r\n})\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}